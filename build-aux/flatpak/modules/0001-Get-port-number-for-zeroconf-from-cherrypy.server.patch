From 9a62099244e542f532a9446f76085e0440f5ba80 Mon Sep 17 00:00:00 2001
From: Dylan McCall <dylan@endlessos.org>
Date: Wed, 2 Dec 2020 15:17:51 -0800
Subject: [PATCH] Get port number for zeroconf from cherrypy.server

With this change, it is possible to set KOLIBRI_HTTP_PORT=0, or pass
Kolibri a socket through socket activation, and have it detect the
assigned port number.
---
 kolibri/utils/cli.py    | 41 +++++++++++++++++++++--------------------
 kolibri/utils/server.py | 40 +++++++++++++++++++++++++---------------
 2 files changed, 46 insertions(+), 35 deletions(-)

diff --git a/kolibri/utils/cli.py b/kolibri/utils/cli.py
index bcdf529b2..6f7d6a369 100644
--- a/kolibri/utils/cli.py
+++ b/kolibri/utils/cli.py
@@ -502,6 +502,26 @@ def start(port, background):
     Start the server on given port.
     """

+    start_with_ready_cb(port, background, ready_cb=_on_ready)
+
+
+def _on_ready(urls, bind_addr=None, bind_port=None):
+    if not urls:
+        logger.error(
+            "Could not detect an IP address that Kolibri binds to, but try "
+            "opening up the following addresses:\n"
+        )
+        urls = [
+            "http://{}:{}".format(ip, bind_port) for ip in ("localhost", "127.0.0.1")
+        ]
+    else:
+        logger.info("Kolibri running on:\n")
+    for addr in urls:
+        sys.stderr.write("\t{}\n".format(addr))
+    sys.stderr.write("\n")
+
+
+def start_with_ready_cb(port, background, ready_cb=None):
     # Check if there is an options.ini file exist inside the KOLIBRI_HOME folder
     sanity_checks.check_default_options_exist()

@@ -528,25 +548,6 @@ def start(port, background):
     else:
         logger.info("Running Kolibri as background process")

-    if serve_http:
-
-        __, urls = server.get_urls(listen_port=port)
-        if not urls:
-            logger.error(
-                "Could not detect an IP address that Kolibri binds to, but try "
-                "opening up the following addresses:\n"
-            )
-            urls = [
-                "http://{}:{}".format(ip, port) for ip in ("localhost", "127.0.0.1")
-            ]
-        else:
-            logger.info("Kolibri running on:\n")
-        for addr in urls:
-            sys.stderr.write("\t{}\n".format(addr))
-        sys.stderr.write("\n")
-    else:
-        logger.info("Starting Kolibri background workers")
-
     # Daemonize at this point, no more user output is needed
     if background:

@@ -564,7 +565,7 @@ def start(port, background):

         become_daemon(**kwargs)

-    server.start(port=port, serve_http=serve_http)
+    server.start(port=port, serve_http=serve_http, ready_cb=ready_cb)


 @main.command(cls=KolibriCommand, help="Stop the Kolibri process")
diff --git a/kolibri/utils/server.py b/kolibri/utils/server.py
index f3607112d..1cf73a09c 100644
--- a/kolibri/utils/server.py
+++ b/kolibri/utils/server.py
@@ -77,12 +77,11 @@ class NotRunning(Exception):


 class ServicesPlugin(SimplePlugin):
-    def __init__(self, bus, port):
+    def __init__(self, bus):
         self.bus = bus
-        self.port = port
         self.workers = None

-    def start(self):
+    def start(self, *args, **kwargs):
         # Initialize the iceqube scheduler to handle scheduled tasks
         scheduler.clear_scheduler()

@@ -105,13 +104,6 @@ class ServicesPlugin(SimplePlugin):

         scheduler.start_scheduler()

-        # Register the Kolibri zeroconf service so it will be discoverable on the network
-        from kolibri.core.discovery.utils.network.search import (
-            register_zeroconf_service,
-        )
-
-        register_zeroconf_service(port=self.port)
-
     def stop(self):
         scheduler.shutdown_scheduler()
         if self.workers is not None:
@@ -143,7 +135,7 @@ class CleanUpPIDPlugin(SimplePlugin):
         _rm_pid_file(PID_FILE)


-def start(port=8080, serve_http=True):
+def start(port=8080, serve_http=True, ready_cb=None):
     """
     Starts the server.

@@ -155,7 +147,7 @@ def start(port=8080, serve_http=True):

     logger.info("Starting Kolibri {version}".format(version=kolibri.__version__))

-    run_server(port=port, serve_http=serve_http)
+    run_server(port=port, serve_http=serve_http, ready_cb=ready_cb)


 def stop(pid=None, force=False):
@@ -313,7 +305,7 @@ def configure_http_server(port):
     cherrypy.server.subscribe()


-def run_server(port, serve_http=True):
+def run_server(port, serve_http=True, ready_cb=None):
     # Unsubscribe the default server
     cherrypy.server.unsubscribe()

@@ -342,7 +334,7 @@ def run_server(port, serve_http=True):
         configure_http_server(port)

     # Setup plugin for services
-    service_plugin = ServicesPlugin(cherrypy.engine, port)
+    service_plugin = ServicesPlugin(cherrypy.engine)
     service_plugin.subscribe()

     # Setup plugin for handling PID file cleanup
@@ -371,6 +363,24 @@ def run_server(port, serve_http=True):

     # Start the server engine (Option 1 *and* 2)
     cherrypy.engine.start()
+
+    cherrypy.server.wait()
+    bind_addr, bind_port = cherrypy.server.bound_addr
+
+    # Write the PID file again, in case the port number has changed
+    _write_pid_file(PID_FILE, port=bind_port)
+
+    # Register the Kolibri zeroconf service so it will be discoverable on the network
+    from kolibri.core.discovery.utils.network.search import (
+        register_zeroconf_service,
+    )
+
+    register_zeroconf_service(port=bind_port)
+
+    if callable(ready_cb):
+        __, urls = get_urls(listen_port=bind_port)
+        ready_cb(urls, bind_addr=bind_addr, bind_port=bind_port)
+
     cherrypy.engine.block()


@@ -517,7 +527,7 @@ def get_urls(listen_port=None):
                         other running instances.
     """
     try:
-        if listen_port:
+        if listen_port is not None:
             port = listen_port
         else:
             __, __, port = get_status()
--
2.33.1
